import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils.executor import start_webhook
import requests
import datetime

BOT_TOKEN = os.getenv("BOT_TOKEN")
PLATRUM_API_KEY = os.getenv("PLATRUM_API_KEY")

# Webhook settings
WEBHOOK_HOST = 'https://telegram-task-bot-4fly.onrender.com'
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# Webserver settings
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 3000))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

# üìß –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–º—ë–Ω —Å email'–∞–º–∏
USER_MAP = {
    "–ò–≤–∞–Ω": "belyak.vasiliy@gmail.com"
    # –î–æ–±–∞–≤–ª—è–π —Å—é–¥–∞ –¥—Ä—É–≥–∏—Ö: "–Ø–Ω–∞": "yana@company.com", ...
}

@dp.message_handler(commands=["start"])
async def start_handler(message: Message):
    await message.reply("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ü–∏—à–∏ /task –ò–≤–∞–Ω —Å–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç –¥–æ 16:00")

@dp.message_handler(commands=["task"])
async def task_handler(message: Message):
    args = message.get_args()
    if not args:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∑–∞–¥–∞—á—É: /task –ò–≤–∞–Ω —Å–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç –¥–æ 16:00")
        return

    try:
        parts = args.split(" –¥–æ ")
        task_info = parts[0].split(" ", 1)
        assignee = task_info[0]
        task_text = task_info[1] if len(task_info) > 1 else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        due_time = parts[1] if len(parts) > 1 else None

        # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ email, –µ—Å–ª–∏ –∏–º—è –Ω–∞–π–¥–µ–Ω–æ
        assigned_email = USER_MAP.get(assignee, assignee)

        # –î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞
        due_date_iso = None
        if due_time:
            now = datetime.datetime.now()
            hour, minute = map(int, due_time.split(":"))
            due_date = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
            due_date_iso = due_date.isoformat()

        headers = {
            "Authorization": f"Bearer {PLATRUM_API_KEY}",
            "Content-Type": "application/json"
        }

        data = {
            "title": task_text,
            "assigned_to": assigned_email,
            "due_date": due_date_iso,
            "status": "–ù–æ–≤–∞—è"  # ‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ-—Ä—É—Å—Å–∫–∏
        }

        response = requests.post("https://api.platrum.ru/v1/tasks", json=data, headers=headers)

        if response.status_code == 201:
            await message.reply(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {assignee}: {task_text}")
        else:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ Platrum: {response.text}")

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    print("üì° Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def on_shutdown(dp):
    logging.warning('Shutting down..')
    await bot.delete_webhook()
    logging.warning('Webhook —É–¥–∞–ª—ë–Ω')

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
