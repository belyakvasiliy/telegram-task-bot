import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils.executor import start_webhook
import requests
import datetime

BOT_TOKEN = os.getenv("BOT_TOKEN")
PLATRUM_API_KEY = os.getenv("PLATRUM_API_KEY")

WEBHOOK_HOST = 'https://telegram-task-bot-4fly.onrender.com'
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 3000))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

# –ò–º—è ‚Üí ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Platrum
USER_MAP = {
    "–ò–≤–∞–Ω": "3443a213affa5a96d35c10190f6708b5"
}

@dp.message_handler(commands=["start"])
async def start_handler(message: Message):
    await message.reply("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ü–∏—à–∏ /task –ò–≤–∞–Ω —Å–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç –¥–æ 16:00")

@dp.message_handler(commands=["task"])
async def task_handler(message: Message):
    args = message.get_args()
    if not args:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∑–∞–¥–∞—á—É: /task –ò–≤–∞–Ω —Å–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç –¥–æ 16:00")
        return

    try:
        parts = args.split(" –¥–æ ")
        task_info = parts[0].split(" ", 1)
        assignee = task_info[0]
        task_text = task_info[1] if len(task_info) > 1 else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        due_time = parts[1] if len(parts) > 1 else None

        user_id = USER_MAP.get(assignee)
        if not user_id:
            await message.reply(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee}")
            return

        now = datetime.datetime.now()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if due_time:
            hour, minute = map(int, due_time.split(":"))
            planned_end = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        else:
            planned_end = now

        planned_end_str = planned_end.strftime("%Y-%m-%d %H:%M:%S")
        planned_end_url = planned_end_str.replace(" ", "%20")  # —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª

        now_str = now.strftime("%Y-%m-%d %H:%M:%S")

        headers = {
            "Api-key": PLATRUM_API_KEY,
            "Content-Type": "application/json"
        }

        data = {
            "name": task_text,
            "description": "–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞",
            "owner_user_id": user_id,
            "responsible_user_ids": [user_id],
            "status_key": "New",
            "tag_keys": ["–±–æ—Ç", "Telegram"],
            "start_date": now_str
        }

        url = f"https://steves.platrum.ru/tasks/api/task/create?planned_end_date={planned_end_url}"

        response = requests.post(url, headers=headers, json=data)

        if response.status_code == 200:
            await message.reply(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {assignee}: {task_text}")
        else:
            await message.reply(
                f"‚ùå –û—à–∏–±–∫–∞ Platrum: {response.text}\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {data}\n"
                f"üîó URL: {url}"
            )

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    print("üì° Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def on_shutdown(dp):
    logging.warning('Shutting down..')
    await bot.delete_webhook()
    logging.warning('Webhook —É–¥–∞–ª—ë–Ω')

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
