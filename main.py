# main.py ‚Äî Telegram-–±–æ—Ç –¥–ª—è Platrum —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º URL –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞

import os
import logging
import datetime
import requests

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.executor import start_webhook

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
PLATRUM_API_KEY = os.getenv("PLATRUM_API_KEY")
PLATRUM_URL = os.getenv("PLATRUM_URL", "https://yourdomain.platrum.ru")

WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", 'https://your-webhook-host.com')
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 3000))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

USER_MAP = {}

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def update_users():
    global USER_MAP
    headers = {"Api-key": PLATRUM_API_KEY, "Content-Type": "application/json"}
    response = requests.post(f"{PLATRUM_URL}/company/api/staff/list", headers=headers)
    if response.status_code == 200:
        data = response.json().get("data", [])
        USER_MAP.clear()
        for user in data:
            if not user.get("is_deleted"):
                USER_MAP[user['user_name']] = user['user_id']

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–¥–∞—á–∏ (–ø–æ Telegram ID –∏–ª–∏ fallback)
def resolve_owner_id(telegram_user_id):
    update_users()
    # –í –±—É–¥—É—â–µ–º ‚Äî —Å–≤—è–∑–∫–∞ telegram_user_id ‚Üî user_id
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—ã–π ID –∏–∑ —Å–ø–∏—Å–∫–∞
    return next(iter(USER_MAP.values()), None)

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    update_users()
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ Platrum.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/task <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n/info <ID> ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n/find <–∫–ª—é—á> ‚Äî –ø–æ–∏—Å–∫\n/close <ID> ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É\n/delete <ID> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n/update <ID> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")

@dp.message_handler(commands=["task"])
async def task_handler(message: types.Message):
    args = message.get_args()
    if not args:
        await message.reply("–£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: /task –°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç")
        return
    update_users()
    keyboard = InlineKeyboardMarkup(row_width=1)
    for name in USER_MAP:
        keyboard.add(InlineKeyboardButton(name, callback_data=f"assign:{name}:{args}"))
    await message.reply("–ö–æ–º—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("assign:"))
async def assign_task(callback_query: CallbackQuery):
    _, name, task_text = callback_query.data.split(":", 2)
    user_id = USER_MAP.get(name)
    owner_id = resolve_owner_id(callback_query.from_user.id)
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    headers = {"Api-key": PLATRUM_API_KEY, "Content-Type": "application/json"}
    data = {
        "name": task_text,
        "description": f"–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram –æ—Ç {name}",
        "owner_user_id": owner_id,
        "responsible_user_ids": [user_id],
        "status_key": "new",
        "tag_keys": ["–±–æ—Ç", "Telegram"],
        "start_date": now,
        "block_id": 3,
        "category_key": "task"
    }
    response = requests.post(f"{PLATRUM_URL}/tasks/api/task/create", headers=headers, json=data)
    result = response.json()
    if response.status_code == 200 and result.get("status") == "success":
        task_id = result["data"].get("id")
        await callback_query.message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_text}\nüîó {PLATRUM_URL}/tasks/task/{task_id}")
    else:
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ Platrum: {response.text}")
    await callback_query.answer()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (info, find, delete, close, update) –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ PLATRUM_URL –∏ API_KEY

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    update_users()

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
