# main.py ‚Äî –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ Platrum —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤

import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook

from config import BOT_TOKEN, WEBHOOK_HOST, WEBHOOK_PATH, WEBHOOK_URL, WEBAPP_HOST, WEBAPP_PORT
from users import update_users, get_all_users, find_user_id_by_name  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

# –ò–º–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
from handlers import tasks, users, boards, wiki

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    update_users()
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ Platrum.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/task <–ò–º—è> <–û–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n/info <ID> ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n/find <–∫–ª—é—á> ‚Äî –ø–æ–∏—Å–∫\n/close <ID> ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É\n/delete <ID> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n/update <ID> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É\n/boards ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫\n/wiki ‚Äî –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π\n/users ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")

# –ö–æ–º–∞–Ω–¥–∞ /users ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
@dp.message_handler(commands=["users"])
async def list_users(message: types.Message):
    users = get_all_users()
    if not users:
        await message.reply("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    text = "üë• *–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:*\n"
    for user in users:
        if not user.get("is_deleted"):
            text += f"\n- {user['user_name']} (ID: {user['user_id']})"
    await message.reply(text, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /task <–ò–º—è> <–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>
@dp.message_handler(commands=["task"])
async def create_task(message: types.Message):
    args = message.get_args()
    if not args or len(args.split()) < 2:
        await message.reply("–£–∫–∞–∂–∏ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /task <–ò–º—è> <–û–ø–∏—Å–∞–Ω–∏–µ>\n–ü—Ä–∏–º–µ—Ä: /task –ò–≤–∞–Ω –°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç –¥–æ 17:00")
        return

    name, *task_text_parts = args.split()
    task_text = " ".join(task_text_parts)
    user_id = find_user_id_by_name(name)

    if not user_id:
        await message.reply(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {name}. –ü—Ä–æ–≤–µ—Ä—å –∏–º—è —á–µ—Ä–µ–∑ /users")
        return

    await message.reply(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {name} (ID: {user_id})\nüìå –ó–∞–¥–∞—á–∞: {task_text}")
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ webhook –∏ –∑–∞–ø—É—Å–∫
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    update_users()

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
