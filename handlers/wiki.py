# wiki.py ‚Äî —Ä–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –∏ —Å—Ç–∞—Ç—å—è–º–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π Platrum

from aiogram import types
from main import dp
from api import platrum_post

@dp.message_handler(commands=["wiki"])
async def list_spaces(message: types.Message):
    result = platrum_post("/wiki/api/space/list")
    spaces = result.get("data", [])
    if not spaces:
        await message.reply("üìö –†–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    text = "üìö *–†–∞–∑–¥–µ–ª—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:*\n"
    for space in spaces:
        text += f"\nüî∏ *{space['title']}* (ID: {space['id']})"
    await message.reply(text, parse_mode="Markdown")

@dp.message_handler(commands=["articles"])
async def list_articles(message: types.Message):
    try:
        space_id = int(message.get_args())
    except:
        await message.reply("–£–∫–∞–∂–∏ ID —Ä–∞–∑–¥–µ–ª–∞: /articles <space_id>")
        return

    result = platrum_post("/wiki/api/article/list", {"space_id": space_id})
    articles = result.get("data", [])
    if not articles:
        await message.reply("üìÑ –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    text = f"üìÑ *–°—Ç–∞—Ç—å–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ {space_id}:*\n"
    for article in articles:
        text += f"\n‚ñ™Ô∏è *{article['title']}* (ID: {article['id']})"
    await message.reply(text, parse_mode="Markdown")

@dp.message_handler(commands=["article"])
async def get_article(message: types.Message):
    try:
        article_id = int(message.get_args())
        result = platrum_post("/wiki/api/article/get", {"id": article_id})
        article = result.get("data")
        if not article:
            await message.reply("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        text = f"üìò *{article['title']}*\n"
        for block in article.get("content_blocks", []):
            if block.get("content"):
                text += f"\n{block['content']}"
        await message.reply(text, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

