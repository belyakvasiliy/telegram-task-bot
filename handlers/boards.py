# boards.py ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∞–º–∏ –∏ –ø–∞–Ω–µ–ª—è–º–∏ –∑–∞–¥–∞—á Platrum

from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from main import dp
from api import platrum_post

@dp.message_handler(commands=["boards"])
async def list_boards(message: types.Message):
    result = platrum_post("/tasks/api/board/list")
    boards = result.get("data", [])
    if not boards:
        await message.reply("–î–æ—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    text = "üìã *–°–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫:*
"
    for board in boards:
        text += f"\nüìå *{board['name']}* (ID: {board['id']})\n–ü–∞–Ω–µ–ª–µ–π: {len(board['panels'])}"
    await message.reply(text, parse_mode="Markdown")

@dp.message_handler(commands=["panels"])
async def list_panels(message: types.Message):
    try:
        board_id = int(message.get_args())
    except:
        await message.reply("–£–∫–∞–∂–∏ ID –¥–æ—Å–∫–∏: /panels <board_id>")
        return

    result = platrum_post("/api/board/panel/list", {"board_id": board_id})
    panels = result.get("data", [])
    if not panels:
        await message.reply("–ü–∞–Ω–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    text = f"üìä *–ü–∞–Ω–µ–ª–∏ –¥–æ—Å–∫–∏ {board_id}:*\n"
    for panel in panels:
        text += f"\n‚û°Ô∏è *{panel['name']}* (ID: {panel['id']})"
    await message.reply(text, parse_mode="Markdown")

@dp.message_handler(commands=["create_panel"])
async def create_panel(message: types.Message):
    try:
        board_id, name = message.get_args().split(" ", 1)
        data = {
            "board_id": int(board_id),
            "name": name,
            "color": "blue",
            "task_fields": [],
            "order": 1,
            "is_archived": False
        }
        result = platrum_post("/api/board/panel/store", data)
        if result.get("status") == "success":
            await message.reply("‚úÖ –ü–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏.")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

@dp.message_handler(commands=["delete_panel"])
async def delete_panel(message: types.Message):
    try:
        panel_id = int(message.get_args())
        result = platrum_post("/api/board/panel/delete", {"panel_id": panel_id})
        if result.get("status") == "success":
            await message.reply("üóë –ü–∞–Ω–µ–ª—å —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏.")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
